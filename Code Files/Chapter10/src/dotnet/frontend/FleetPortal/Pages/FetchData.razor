@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using System.Linq;
@using FleetAPI;
@using FleetPortal.Data;
@inject HttpClient HttpClient
@inject FleetPortalBackendConfig BackendConfig

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.UtcDateTime.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}
<p>Message: @errorMessage</p>

@code {
    private WeatherForecast[]? forecasts;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        var envVarValue = System.Environment.GetEnvironmentVariable("DOTNET_BACKEND_ENDPOINT");
        errorMessage = $"INJECTED:{BackendConfig.Endpoint}";
        errorMessage += $"ENVVAR:{envVarValue}";

        var client = new FleetAPIClient(BackendConfig.Endpoint, HttpClient);
        var result = await client.GetWeatherForecastAsync();
        forecasts = result.ToArray();
    }
}
